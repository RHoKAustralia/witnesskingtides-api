{
  "method": {
    "name": "flickr.photos.comments.getList",
    "needslogin": 0,
    "needssigning": 0,
    "requiredperms": 0,
    "description": {
      "_content": "Returns the comments for a photo"
    },
    "response": {
      "_content": "<comments photo_id=\"109722179\">\r\n        <comment id=\"6065-109722179-72057594077818641\"\r\n         author=\"35468159852@N01\" authorname=\"Rev Dan Catt\" datecreate=\"1141841470\"\r\n         permalink=\"http://www.flickr.com/photos/straup/109722179/#comment72057594077818641\"\r\n         >Umm, I'm not sure, can I get back to you on that one?</comment>\r\n</comments>"
    }
  },
  "arguments": {
    "argument": [
      {
        "name": "api_key",
        "optional": 0,
        "_content": "Your API application key. <a href=\"/services/api/misc.api_keys.html\">See here</a> for more details."
      },
      {
        "name": "photo_id",
        "optional": "0",
        "_content": "The id of the photo to fetch comments for."
      },
      {
        "name": "min_comment_date",
        "optional": "1",
        "_content": "Minimum date that a a comment was added. The date should be in the form of a unix timestamp."
      },
      {
        "name": "max_comment_date",
        "optional": "1",
        "_content": "Maximum date that a comment was added. The date should be in the form of a unix timestamp."
      },
      {
        "name": "page",
        "optional": "1",
        "_content": ""
      },
      {
        "name": "per_page",
        "optional": "1",
        "_content": ""
      },
      {
        "name": "include_faves",
        "optional": "1",
        "_content": ""
      },
      {
        "name": "sort",
        "optional": "1",
        "_content": "Get the comments sorted. If value is date-posted-desc,  the comments are returned in reverse chronological order. The default is chronological."
      },
      {
        "name": "secure_image_embeds",
        "optional": "1",
        "_content": "This argument will secure the external image embeds in all the markup and return a secure<Field> back in addition to the <Field>"
      },
      {
        "name": "offset",
        "optional": "1",
        "_content": ""
      },
      {
        "name": "limit",
        "optional": "1",
        "_content": ""
      },
      {
        "name": "bbml_need_all_photo_sizes",
        "optional": "1",
        "_content": "If the API needs all photo sizes added as attributes to the bbml. Use this with expand_bbml, but dont use it with use_text_for_links. Also when you give this one, you can specify primary_photo_longest_dimension or a default of 240 will be assumed"
      },
      {
        "name": "primary_photo_longest_dimension",
        "optional": "1",
        "_content": "When used with bbml_need_all_photo_sizes, it specifies the maximum dimension of width and height to be used as the <img src /> url"
      },
      {
        "name": "external_images_minimal",
        "optional": "1",
        "_content": "When passed as 1, the external image embeds are minimal and not the big BBML code thats returned otherwise. "
      }
    ]
  },
  "errors": {
    "error": [
      {
        "code": "1",
        "message": "Photo not found",
        "_content": "The photo id was either invalid or was for a photo not viewable by the calling user."
      },
      {
        "code": 100,
        "message": "Invalid API Key",
        "_content": "The API key passed was not valid or has expired."
      },
      {
        "code": 105,
        "message": "Service currently unavailable",
        "_content": "The requested service is temporarily unavailable."
      },
      {
        "code": 106,
        "message": "Write operation failed",
        "_content": "The requested operation failed due to a temporary issue."
      },
      {
        "code": 111,
        "message": "Format \"xxx\" not found",
        "_content": "The requested response format was not found."
      },
      {
        "code": 112,
        "message": "Method \"xxx\" not found",
        "_content": "The requested method was not found."
      },
      {
        "code": 114,
        "message": "Invalid SOAP envelope",
        "_content": "The SOAP envelope send in the request could not be parsed."
      },
      {
        "code": 115,
        "message": "Invalid XML-RPC Method Call",
        "_content": "The XML-RPC request document could not be parsed."
      },
      {
        "code": 116,
        "message": "Bad URL found",
        "_content": "One or more arguments contained a URL that has been used for abuse on Flickr."
      }
    ]
  },
  "stat": "ok"
}